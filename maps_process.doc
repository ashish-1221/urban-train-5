"""
#! Mandal Maps Creation Process
1. #!Get inputs Function 
    ##(ST_NAME,Election Type,Election Year,AC,Village Shape File) -> (village Shape File of Selected AC ,Selected AC Base Retro File, Selected AC Mapping Files)
        1.1 #?(Election Year, Election Type, ST_NAME) -> user input through streamlit
        1.2 #?Shape file -> From data/shapefiles/(ST_NAME)
        1.3 #?Base Retro Path -> From gdrive 
            Maybe Paths:
                1. EDM-DB->Booth Mapping->ST_NAME->Base retro data->
        [file name based on format {(ST_NAME)_(Election Type)_(Election year)}]
                2. EDM-DB->Data Dash->Data-Dash Data->(ST_NAME)->Base Retro Data->
                [file name based on format {(ST_NAME)_Data_(Election year)}]
        1.4 #?Mapping Files -> From gdrive
            Maybe Paths:
                EDM-DB-> Census Maps(Village to Locality) -> (ST_NAME) -> Mapping Files->
        Returns -> (Shape File ,Base Retro File,Mapping Files)

Process breakdown for functions
1. Read the mapping file based on user input: (AC No)->(Mapping File DataFrame)
    1.1 Return the mapping file dataframe
2. Operations on Mapping File DataFrame
    2.1 #!Creation of two df from mapping file with required columns:
    ##  (Mapping File DataFrame)->(df_man,df_vill)
    2.2 #!Basic Evaluation 
    ##   (df_man,df_vill)->(df_man,df_vill)
        2.2.1 Dropping all rows with NaN values from df_vill and df_man
    2.3 #!Exploding and Separated "Mapped Locality" Column on 'special_character':
    ##   (df_vill)->(df_vill) => will be called inside 2.2
        2.3.1 Converting Mapped Locality Column to type 'str'
        2.3.2 Splitting the Mapped Locality which has '&&' value in df_vill
        2.3.3 Exploding the df_vill on Mapped Locality
        2.3.4 Dropping the duplicates from df_vill
    2.4 #!Received final df in which corresponding each village have mapped locality ,mandal: 
    ## (df_vill,df_man,vllage_shp_file,ac) ->(df_final)
        2.4.1 Merging df_vill and df_man -> df_loc_man
            2.4.1.1 how="left" {df_vill = left and df_man = right}
            2.4.1.2 left_on ='Mapped Locality' right_on = 'Locality'
        2.4.2 Dropping the duplicates from df_loc_man
        2.4.3 Converting VILL_ID to type(int)
        2.4.4 Filling the null values in Mandal Column with unmapped_VILL_ID
        2.4.5 Merging df_loc_man with village shape file on VILL_ID =: merge(df_loc_man,vill_shp)->(df1)
        2.4.6 (#*Final df->df1)
        before implementing nearest neighbour,if we have zero unmapped village in that case we can proceed for maps with this
        #* Checking for unmapped villages in the final df
            2.4.6.1 Dropping the following columns
                2.4.6.1.1 AC_POST_y
                2.4.6.1.2 NAME_11_y
                2.4.6.1.3 Mapped Locality
        2.4.7 Getting the AC_NAME for the selected ac->(user input)
    2.5 #! Implementing Nearest Neighbour Algorithm
    ## (df_final)
        2.5.1 Getting unmapped village shape files based on condition whether Locality is Null or not -> (unmapped_vill_ps_shp)
        2.5.2 Dropping the null values from df1(Final df)
        2.5.3 Adding the centroid column of unmapped villages -> (unmapped_vill_ps_shp)
        2.5.4 Adding the centroid column on Final df ->(ps_cord_gdf_shp)
        2.5.5 Implemeting nearest() -> mapped_vill_ps_cord
                        Arguments: Final df and ps_cord_gdf_shp
        2.5.6 Getting required columns from mapped_vill_ps_cord 
                            'VILL_ID', 'AC_POST_x', 'AC_NAME_PO', 'NAME11_x', 'geometry','booth_no', 'Locality', 'Mandal'
        2.5.7 Final df after implementing nearest neighbour -> (ac_shape_file)
            2.5.7.1  concat mapped_vill_ps_cord and ps_cord_gdf_shp
            2.5.7.2 Dropping the centroid column
"""






        #!Received final df in which corresponding each village have mapped locality ,mandal:
        ## (df_vill,df_man,vllage_shp_file,ac) ->(df_final)
        ##2.4.1 Merging df_vill and df_man -> df_loc_man (done)
        ##     2.4.1.1 how="left" {df_vill = left and df_man = right}
        ##     2.4.1.2 left_on ='Mapped Locality' right_on = 'Locality'
        ## 2.4.2 Dropping the duplicates from df_loc_man (done)
        ## 2.4.3 Converting VILL_ID to type(int) (done)
        ## 2.4.4 Filling the null values in Mandal Column with unmapped_VILL_ID (done)
        ## 2.4.5 Merging df_loc_man with village shape file on VILL_ID =: merge(df_loc_man,vill_shp)->(df1) (done)
        ## 2.4.6 (#*Final df->df1)
        ## before implementing nearest neighbour,if we have zero unmapped village in that case we can proceed for maps with this
        ## Checking for unmapped villages in the final df
        ##     2.4.6.1 Dropping the following columns(done)
        ##         2.4.6.1.1 AC_POST_y
        ##         2.4.6.1.2 NAME_11_y
        ##         2.4.6.1.3 Mapped Locality
        ## 2.4.7 Getting the AC_NAME for the selected ac (done)

        
        ## 2.5 #! Implementing Nearest Neighbour Algorithm
        ## (df_final)
        ## 2.5.1 Getting unmapped village shape files based on condition whether Locality is Null or not -> (unmapped_vill_ps_shp) (done)
        ## 2.5.2 Dropping the null values from df1(Final df)(done)
        ## 2.5.3 Adding the centroid column of unmapped villages -> (unmapped_vill_ps_shp) (done)
        ## 2.5.4 Adding the centroid column on Final df ->(ps_cord_gdf_shp) (done)
        ## 2.5.5 Implemeting nearest() -> mapped_vill_ps_cord (done)
        ##                Arguments: Final df and ps_cord_gdf_shp
        ## 2.5.6 Getting required columns from mapped_vill_ps_cord (done)
        ##                    'VILL_ID', 'AC_POST_x', 'AC_NAME_PO', 'NAME11_x', 'geometry','booth_no', 'Locality', 'Mandal'
        ## 2.5.7 Final df after implementing nearest neighbour -> (ac_shape_file)
        ##    2.5.7.1  concat mapped_vill_ps_cord and ps_cord_gdf_shp (done)
        ##    2.5.7.2 Dropping the centroid column (done)
        












#! Census Maps Main Class (Written by:-Rashmi Sahu)
"""
What happens when Census Map() object is called
    
    1. Takes the input files required
        1.1 Mapping files Folder path -> Preparation of this folder is what takes most time
        1.2 Village shape file
        1.3 base retro path
        1.4 Election year
        1.5 Election Type
        1.6 Final Map Folder Path
    2. Read the following files 
        2.1 Read the village shape files and get the required columns
        2.2 Read the base retro file
        2.3 Read the file in Mapping Files Folder Path
    3. Reading individually each Mapping File through Loop
        #? What happens inside the loop
        3.1 #*user input AC you want to generate the map for??
        3.2 Read the required AC Mapping File
        3.3 Prepare Data from the mapping file -> Refer to code line 109
            (#? how is the data prepared)
            # This is the step which takes most time 
            ##! Mapping file is generated through DE team
            ##! This is the step of the process which takes the most time
            ##! Data Consolidation
            
"""
# class CensusMap:
#     """_summary_ ## It initializes the an instance of the class Census Maps
#     It takes as input the following files
#     1. mapping file folder path 
#         1.1 # todo  It should be taken directly from the EDM-DB Folder/Booth Mapping/user_input->(STATE_NAME)/Mapping Files/Election Year Election Type
#         1.2 Must be User Interactive to choose the folder and take the files
#     2. village shape file
#         2.1 (Solved) In the data\shapefiles\SHP_(ST_NAME) Folder (already exported)
#     3. base retro path
#         3.1 # todo To be taken from EDM-DB Folder/Booth Mapping/Base retro data/(Chooosing based on (ST_NAME)_(Election_Type)_(Election Year))
#     4. Election Year
#         4.1 # todo To be provided by user input
#     5. Election Type
#         5.1 # todo To be Provided by user input
#     6. Final Map folder path
#         6.1 #! not to be used (will be exported from the web app)
    
    
#     """
#     def __init__(self, mapping_file_folder_path, village_shp_file, base_retro_path, election_year, election_type, final_map_folder_path):
#         self.mapping_file_folder_path = mapping_file_folder_path
#         self.village_shp_file = village_shp_file
#         self.base_retro_path = base_retro_path
#         self.election_year = election_year
#         self.election_type = election_type
#         self.final_map_folder_path = final_map_folder_path
        
        
#         """_summary_ ## Iterative Function to take input for a file
#             #! not required to follow all the changes
#             # todo required to break into components and create functions
#             # todo required to break into steps
#         """
#     def data(self):
#         """_summary_ ## get the input of files for use to create maps
#         """
#         mapping_file_folder_path = self.mapping_file_folder_path
#         village_shp_file = self.village_shp_file
#         base_retro_path = self.base_retro_path
#         election_year = self.election_year
#         election_type = self.election_type
#         final_map_folder_path = self.final_map_folder_path

#         # Getting the centroid of all villages and adding the Lat/Long column
#         """
#         ## read the village shape file and base retro file
#         """
#         ville_shp_ = gd.read_file(village_shp_file)
#         vill_shp = ville_shp_[
#             ['VILL_ID', 'AC_POST', 'AC_NAME_PO', 'NAME11', 'geometry']]
#         base_retro = pd.read_csv(base_retro_path)

#         """
#         ## read the mapping file folder path and get the files
#         """
#         # Add the mapping file folder path
#         path = mapping_file_folder_path
#         os.chdir(path)
#         file_path = os.listdir(path)
#         for file in file_path[:]:

#             try:
#                 # extracting ac no. from file name
#                 ac = int("".join(i for i in file if i.isdigit()))

#                 # Reading the mapping file
#                 data = pd.read_excel(path + "\\" + file) ## data contains mapping file for an AC
#                 # preparing final data from mapping file
                
                
#                 """
#                 1. df_vill -> Mapping File 
#                     1.1 Columns : 
#                         1.1.1 VILL_ID
#                         1.1.2 AC_POST
#                         1.1.3 NAME11
#                         1.1.4 Mapped Locality
#                 2. df_man -> Mapping File
#                     2.1 Columns :
#                         2.1.1 booth_no
#                         2.1.2 Locality
#                         2.1.3 Mandal
#                 3. Process
#                     3.1 Selecting the required columns in df_vill,df_man
#                     3.2 Basic Evaluation
#                         3.2.1 Dropping all rows with NaN values from df_vill and df_man
#                     3.3 Exploding & Separated Locality -> df_vill
#                         3.3.1 Converting Mapped Locality Column to type 'str'
#                         3.3.2 Splitting the Mapped Locality which has and value in df_vill
#                         3.3.3 Exploding the df_vill on Mapped Locality
#                         3.3.4 Dropping the duplicates from df_vill
#                     3.4 Received final df in which corresponding each village have mapped locality ,mandal
#                         3.4.1 Merging df_vill and df_man -> df_loc_man
#                             3.4.1.1 how="left" {df_vill = left and df_man = right}
#                             3.4.1.2 left_on ='Mapped Locality' right_on = 'Locality'
#                         3.4.2 Dropping the duplicates from df_loc_man
#                         3.4.3 Converting VILL_ID to type(int)
#                     3.5 Filling the null values in Mandal Column with unmapped_VILL_ID
#                     3.6 Extracting respective ac->(input by user) village level shape file data
#                     3.7 Merging df_loc_man with village shape file on VILL_ID
#                     3.8 Extracting base retro of the given ac->(input by user)
#                     3.9 #!QC Step
#                         (#*Final df->df1)
#                         before implementing nearest neighbour,
#                         if we have zero unmapped village in that case 
#                         we can proceed for maps with this
#                         #* Checking for unmapped villages in the final df
#                         3.9.1 Dropping the following columns
#                             3.9.1.1 AC_POST_y
#                             3.9.1.2 NAME_11_y
#                             3.9.1.3 Mapped Locality
#                         3.9.2 Getting the AC_NAME for the selected ac->(user input)
#                     3.10 Implementing the nearest neighbour Algorithm
#                         3.10.1 Getting unmapped village shape files based on 
#                         condition whether Locality is Null or not
#                         3.10.2 Dropping the null values from df1(Final df)
#                         3.10.3 Adding the centroid column of unmapped villages(unmapped_vill_ps_shp)
#                         3.10.4 Adding the centroid column on Final df (ps_cord_gdf_shp)
#                         3.10.5 Implemeting nearest() -> mapped_vill_ps_cord
#                             Arguments: Final df and ps_cord_gdf_shp
#                         3.10.6 Getting required columns from mapped_vill_ps_cord 
#                             'VILL_ID', 'AC_POST_x', 'AC_NAME_PO', 'NAME11_x', 'geometry','booth_no', 'Locality', 'Mandal'
#                     3.11 Final df after implementing nearest neighbour -> (ac_shape_file)
#                         3.11.1  concat mapped_vill_ps_cord and ps_cord_gdf_shp
#                         3.11.2 Dropping the centroid column
#                     3.12 #*Calling the mandal maps(ac,ac_shape_file,ac_name,final_map_folder_path)
#                     3.13 exploding final df -> (ac_shape_file) via booth no. so we can easily merge it with base retro
#                         3.13.1 final df convert booth no column to str
#                         3.13.2 #? Grouping final df on 'VILL_ID' and aggregating booth no column -> (to get what???)
#                         3.13.3 Splitting booth no column on ','
#                         3.13.4 Exploding on booth no column
#                         3.13.5 Converting booth no column to int data type
#                         Return dataframe -> df_ex
#                     3.14 merging base retro data with final df
#                         3.14.1 Code Implemented
#                             df_retro = pd.merge(df_ex, base_retro_1, right_on='booth 2022', left_on='booth_no', how='left')
#                         3.14.2 

#                 """
#                 df_vill = data[['VILL_ID', 'AC_POST','NAME11', 'Mapped Locality']] 
#                 df_man = data[['booth_no', 'Locality', 'Mandal']]
#                 df_vill = df_vill.dropna(how='all', axis=0) ## dropping all rows with na valu
#                 df_man = df_man.dropna(how='all', axis=0)
                
#                 # Exploding && separated locality
#                 df_vill['Mapped Locality'] = df_vill['Mapped Locality'].astype(
#                     'str')
#                 df_vill['Mapped Locality'] = df_vill['Mapped Locality'].apply(
#                     lambda x: list(map(str, x.split('&&'))))
#                 df_vill_ex = df_vill.explode(
#                     'Mapped Locality', ignore_index=True)
#                 df_vill_ex = df_vill_ex.drop_duplicates()
                
#                 # Received final df in which corresponding each village have mapped locality ,mandal
#                 df_loc_man = df_vill_ex.merge(
#                     df_man, how='left', left_on='Mapped Locality', right_on='Locality')
#                 df_loc_man = df_loc_man.drop_duplicates()
#                 df_loc_man['VILL_ID'] = df_loc_man['VILL_ID'].astype('int')

#                 for i in df_loc_man[df_loc_man['Mandal'].isnull()].index:
#                     df_loc_man.loc[i, 'Mandal'] = 'unmapped' + \
#                         "_" + str(df_loc_man.loc[i, 'VILL_ID'])

#                 # Extracting respective ac village level shape file data
#                 vill_shp1 = vill_shp[vill_shp['AC_POST'] == ac]
#                 df_final = vill_shp1.merge(
#                     df_loc_man, how='left', on='VILL_ID')

#                 # Extracting respective ac base retro data
#                 base_retro_1 = base_retro[base_retro['AC'] == ac]

#                 # Final df before implementing nearest neighbour, if we have zero unmapped village in that case we can proceed for maps with this
#                 df1 = df_final.drop(
#                     columns=['AC_POST_y', 'NAME11_y', 'Mapped Locality'])
#                 ac_name = df1['AC_NAME_PO'].unique()[0]

#                 # Implementing nearest neighbour algo
#                 unmapped_vill_ps_shp = df1[df1['Locality'].isnull() == True]
#                 ps_cord_gdf = df1.dropna()
#                 unmapped_vill_shp = add_centroid(unmapped_vill_ps_shp)
#                 ps_cord_gdf_shp = add_centroid(ps_cord_gdf)
#                 mapped_vill_ps_cord = nearest(
#                     unmapped_vill_shp, ps_cord_gdf_shp)
#                 mapped_vill_ps_cord.columns = ['VILL_ID_', 'AC_POST_x_', 'AC_NAME_PO', 'NAME11_x_', 'booth_no',
#                                                'Locality', 'Mandal', 'centroid_', 'VILL_ID', 'AC_POST_x', 'AC_NAME_PO_',
#                                                'NAME11_x', 'geometry', 'booth_no_', 'Locality_', 'Mandal_', 'centroid']
#                 mapped_vill_ps_cord = mapped_vill_ps_cord[['VILL_ID', 'AC_POST_x', 'AC_NAME_PO', 'NAME11_x', 'geometry',
#                                                            'booth_no', 'Locality', 'Mandal']]

#                 # Final df after implementing nearest neighbour
#                 ac_shape_file = pd.concat([mapped_vill_ps_cord, ps_cord_gdf]).reset_index(drop=True).drop(
#                     columns=['centroid'])

#                 # Mandal Boundary map function
#                 mandal_maps(ac, ac_shape_file, ac_name, final_map_folder_path)

#                 # exploding final df via booth no. so we can easily merge it with base retro
#                 ac_shape_file['booth_no'] = ac_shape_file['booth_no'].astype(
#                     'str')
#                 df_ = ac_shape_file.groupby(['VILL_ID'], as_index=False).agg(
#                     {'booth_no': lambda x: ",".join(list(map(str, x)))})
#                 df_['booth_no'] = df_['booth_no'].apply(
#                     lambda x: list(map(str, x.split(','))))
#                 df_ex = df_.explode('booth_no', ignore_index=True)
#                 df_ex['booth_no'] = df_ex['booth_no'].astype('float')
#                 df_ex['booth_no'] = df_ex['booth_no'].astype('int')

#                 # merging base retro data with final df
#                 df_retro = pd.merge(
#                     df_ex, base_retro_1, right_on='booth 2022', left_on='booth_no', how='left')

#                 try:
#                     # Base retro function for calculating Rank1, VS, Margin
#                     final1 = vs_margin_win_loss(df_retro, ac, election_year)

#                     # WinLoss map function
#                     win_loss_map(ac, vill_shp1, final1, ac_shape_file, ac_name, election_year, election_type,
#                                  final_map_folder_path)

#                     # VS map function
#                     vs_maps(ac, final1, vill_shp1, ac_shape_file, ac_name, election_year, election_type,
#                             final_map_folder_path)

#                     # Margin map function
#                     margin_maps(ac, final1, vill_shp1, ac_shape_file, ac_name, election_year, election_type,
#                                 final_map_folder_path)

#                 except Exception as ee:
#                     print("AC:", ac, " : Votes NA", "**********", ee)

#             except Exception as ee:
#                 print("AC: ", ac, "*********************", ee)
#                 # Mandal Boundary map function
#                 mandal_maps(ac, df1, ac_name, final_map_folder_path)

#                 # exploding final df via booth no. so we can easily merge it with base retro
#                 df1['booth_no'] = df1['booth_no'].astype('str')
#                 df_ = df1.groupby(['VILL_ID'], as_index=False).agg(
#                     {'booth_no': lambda x: ",".join(list(map(str, x)))})
#                 df_['booth_no'] = df_['booth_no'].apply(
#                     lambda x: list(map(str, x.split(','))))
#                 df_ex = df_.explode('booth_no', ignore_index=True)
#                 df_ex['booth_no'] = df_ex['booth_no'].astype('float')
#                 df_ex['booth_no'] = df_ex['booth_no'].astype('int')

#                 # merging base retro data with final df
#                 df_retro = pd.merge(
#                     df_ex, base_retro_1, right_on='booth 2022', left_on='booth_no', how='left')

#                 try:
#                     # Base retro function for calculating Rank1, VS, Margin
#                     final1 = vs_margin_win_loss(df_retro, ac, election_year)

#                     # WinLoss map function
#                     win_loss_map(ac, vill_shp1, final1, df1, ac_name, election_year, election_type,
#                                  final_map_folder_path)

#                     # VS map function
#                     vs_maps(ac, final1, vill_shp1, df1, ac_name,
#                             election_year, election_type, final_map_folder_path)

#                     # Margin map function
#                     margin_maps(ac, final1, vill_shp1, df1, ac_name, election_year, election_type,
#                                 final_map_folder_path)

#                 except Exception as ee:
#                     print("AC:", ac, " : Votes NA", "**********", ee)



